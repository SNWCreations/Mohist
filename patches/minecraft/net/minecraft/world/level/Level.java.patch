--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1,17 +_,24 @@
 package net.minecraft.world.level;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.api.WorldAPI;
+import com.mohistmc.api.event.block.ModsEntityDestroyBlockEvent;
+import com.mohistmc.api.event.block.SetBlockEvent;
+import com.mohistmc.forge.ForgeInjectBukkit;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -22,6 +_,7 @@
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -38,6 +_,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.RecipeManager;
@@ -49,11 +_,13 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -69,8 +_,19 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.v1_20_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_20_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_20_R1.block.CapturedBlockState;
+import org.bukkit.craftbukkit.v1_20_R1.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R1.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.v1_20_R1.util.CraftSpawnCategory;
+import org.bukkit.entity.SpawnCategory;
+import org.bukkit.event.block.BlockPhysicsEvent;
 
-public abstract class Level implements LevelAccessor, AutoCloseable {
+public abstract class Level extends net.minecraftforge.common.capabilities.CapabilityProvider<Level> implements LevelAccessor, AutoCloseable, net.minecraftforge.common.extensions.IForgeLevel {
    public static final Codec<ResourceKey<Level>> f_46427_ = ResourceKey.m_195966_(Registries.f_256858_);
    public static final ResourceKey<Level> f_46428_ = ResourceKey.m_135785_(Registries.f_256858_, new ResourceLocation("overworld"));
    public static final ResourceKey<Level> f_46429_ = ResourceKey.m_135785_(Registries.f_256858_, new ResourceLocation("the_nether"));
@@ -82,7 +_,7 @@
    public static final int f_151509_ = 24000;
    public static final int f_151510_ = 20000000;
    public static final int f_151511_ = -20000000;
-   protected final List<TickingBlockEntity> f_151512_ = Lists.newArrayList();
+   protected final List<TickingBlockEntity> f_151512_ = Lists.newArrayList(); public final int getTotalTileEntityTickers() { return this.f_151512_.size(); } // Paper
    protected final NeighborUpdater f_220350_;
    private final List<TickingBlockEntity> f_151503_ = Lists.newArrayList();
    private boolean f_151504_;
@@ -101,19 +_,64 @@
    private final RandomSource f_220348_ = RandomSource.m_216337_();
    private final ResourceKey<DimensionType> f_220349_;
    private final Holder<DimensionType> f_204147_;
-   protected final WritableLevelData f_46442_;
+   public final WritableLevelData f_46442_;
    private final Supplier<ProfilerFiller> f_46446_;
    public final boolean f_46443_;
    private final WorldBorder f_46447_;
    private final BiomeManager f_46420_;
-   private final ResourceKey<Level> f_46421_;
+   protected final ResourceKey<Level> f_46421_;
    private final RegistryAccess f_268710_;
    private final DamageSources f_268497_;
    private long f_186455_;
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> freshBlockEntities = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> pendingFreshBlockEntities = new java.util.ArrayList<>();
+
+   // CraftBukkit start Added the following
+   public CraftWorld world;
+   public boolean pvpMode;
+   public boolean keepSpawnInMemory = true;
+   public static org.bukkit.generator.ChunkGenerator generator;
+   public static org.bukkit.World.Environment environment;
+   public static org.bukkit.generator.BiomeProvider biomeProvider;
+
+   public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
+   public boolean captureBlockStates = false;
+   public boolean captureTreeGeneration = false;
+   public Map<BlockPos, CapturedBlockState> capturedBlockStates = new java.util.LinkedHashMap<>();
+   public Map<BlockPos, BlockEntity> capturedTileEntities = new HashMap<>();
+   public List<ItemEntity> captureDrops;
+   public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
+   public boolean populating;
+   public org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+
+   public CraftWorld getWorld() {
+      return this.world;
+   }
+   public CraftServer getCraftServer() {
+      return (CraftServer) Bukkit.getServer();
+   }
+   public ResourceKey<LevelStem> getTypeKey() {
+      return Registries.m_257452_(f_46421_);
+   }
+   public static void craftWorldData(org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, org.bukkit.generator.BiomeProvider bp) {
+      generator = gen;
+      environment = env;
+      biomeProvider = bp;
+   }
 
    protected Level(WritableLevelData p_270739_, ResourceKey<Level> p_270683_, RegistryAccess p_270200_, Holder<DimensionType> p_270240_, Supplier<ProfilerFiller> p_270692_, boolean p_270904_, boolean p_270470_, long p_270248_, int p_270466_) {
+      super(Level.class);
       this.f_46446_ = p_270692_;
       this.f_46442_ = p_270739_;
+      // CraftBukkit Ticks things
+      for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+         if (CraftSpawnCategory.isValidForLimits(spawnCategory) && getCraftServer() != null) {
+            this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+         }
+      }
       this.f_204147_ = p_270240_;
       this.f_220349_ = p_270240_.m_203543_().orElseThrow(() -> {
          return new IllegalArgumentException("Dimension must be registered, got " + p_270240_);
@@ -124,11 +_,11 @@
       if (dimensiontype.f_63859_() != 1.0D) {
          this.f_46447_ = new WorldBorder() {
             public double m_6347_() {
-               return super.m_6347_() / dimensiontype.f_63859_();
+               return super.m_6347_(); // CraftBukkit
             }
 
             public double m_6345_() {
-               return super.m_6345_() / dimensiontype.f_63859_();
+               return super.m_6345_(); // CraftBukkit
             }
          };
       } else {
@@ -141,6 +_,46 @@
       this.f_220350_ = new CollectingNeighborUpdater(this, p_270466_);
       this.f_268710_ = p_270200_;
       this.f_268497_ = new DamageSources(p_270200_);
+      // CraftBukkit start
+      if (environment == null) {
+         environment = ForgeInjectBukkit.environment.getOrDefault(getTypeKey(), World.Environment.CUSTOM);
+      }
+      m_6857_().world = this;
+      // From PlayerList.setPlayerFileData
+      m_6857_().m_61929_(new BorderChangeListener() {
+
+         @Override
+         public void m_6312_(WorldBorder pBorder, double pSize) {
+            getCraftServer().getHandle().m_11270_(new ClientboundSetBorderSizePacket(pBorder), pBorder.world.m_46472_());
+         }
+
+         @Override
+         public void m_6689_(WorldBorder pBorder, double pOldSize, double pNewSize, long pTime) {
+            getCraftServer().getHandle().m_11270_(new ClientboundSetBorderLerpSizePacket(pBorder), pBorder.world.m_46472_());
+         }
+
+         @Override
+         public void m_7721_(WorldBorder pBorder, double pX, double pZ) {
+            getCraftServer().getHandle().m_11270_(new ClientboundSetBorderCenterPacket(pBorder), pBorder.world.m_46472_());
+         }
+
+         @Override
+         public void m_5904_(WorldBorder pBorder, int pWarningTime) {
+            getCraftServer().getHandle().m_11270_(new ClientboundSetBorderWarningDelayPacket(pBorder), pBorder.world.m_46472_());
+         }
+
+         @Override
+         public void m_5903_(WorldBorder pBorder, int pWarningBlocks) {
+            getCraftServer().getHandle().m_11270_(new ClientboundSetBorderWarningDistancePacket(pBorder), pBorder.world.m_46472_());
+         }
+
+         @Override
+         public void m_6315_(WorldBorder pBorder, double pDamagePerBlock) { }
+
+         @Override
+         public void m_6313_(WorldBorder pBorder, double pDamageSafeZone) { }
+      });
+      // CraftBukkit end
    }
 
    public boolean m_5776_() {
@@ -191,6 +_,26 @@
    }
 
    public boolean m_6933_(BlockPos p_46605_, BlockState p_46606_, int p_46607_, int p_46608_) {
+      {
+         SetBlockEvent event = new SetBlockEvent(new Location(this.getWorld(), p_46605_.m_123341_(), p_46605_.m_123342_(), p_46605_.m_123343_()));
+         Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            org.bukkit.block.Block block = event.getLocation().getBlock();
+            block.getState().update();
+            return false;
+         }
+      }
+      // CraftBukkit start - tree generation
+      if (this.captureTreeGeneration) {
+         CapturedBlockState blockstate = capturedBlockStates.get(p_46605_);
+         if (blockstate == null) {
+            blockstate = CapturedBlockState.getTreeBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.m_7949_(), blockstate);
+         }
+         blockstate.setData(p_46606_);
+         return true;
+      }
+      // CraftBukkit end
       if (this.m_151570_(p_46605_)) {
          return false;
       } else if (!this.f_46443_ && this.m_46659_()) {
@@ -198,11 +_,60 @@
       } else {
          LevelChunk levelchunk = this.m_46745_(p_46605_);
          Block block = p_46606_.m_60734_();
+
+         // CraftBukkit start - capture blockstates
+         boolean captured = false;
+         if (this.captureBlockStates && !this.capturedBlockStates.containsKey(p_46605_)) {
+            CapturedBlockState blockstate = CapturedBlockState.getBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.m_7949_(), blockstate);
+            captured = true;
+         }
+         // CraftBukkit end
+
+         p_46605_ = p_46605_.m_7949_(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.f_46443_) {
+             blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.f_46421_, this, p_46605_, p_46607_);
+             this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = m_8055_(p_46605_);
+         int oldLight = old.getLightEmission(this, p_46605_);
+         int oldOpacity = old.m_60739_(this, p_46605_);
+         levelchunk.mohist$doPlace.set((p_46607_ & 1024) == 0);
          BlockState blockstate = levelchunk.m_6978_(p_46605_, p_46606_, (p_46607_ & 64) != 0);
+
          if (blockstate == null) {
+            // CraftBukkit start - remove blockstate if failed (or the same)
+            if (this.captureBlockStates && captured) {
+               this.capturedBlockStates.remove(p_46605_);
+            }
+            // CraftBukkit end
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.m_8055_(p_46605_);
+            if ((p_46607_ & 128) == 0 && blockstate1 != blockstate && (blockstate1.m_60739_(this, p_46605_) != oldOpacity || blockstate1.getLightEmission(this, p_46605_) != oldLight || blockstate1.m_60787_() || blockstate.m_60787_())) {
+               this.m_46473_().m_6180_("queueCheckLight");
+               this.m_7726_().m_7827_().m_7174_(p_46605_);
+               this.m_46473_().m_7238_();
+            }
+
+            if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+               this.markAndNotifyBlock(p_46605_, levelchunk, blockstate, p_46606_, p_46607_, p_46608_);
+            }
+
+            return true;
+         }
+      }
+   }
+
+   // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos p_46605_, @Nullable LevelChunk levelchunk, BlockState blockstate, BlockState p_46606_, int p_46607_, int p_46608_) {
+      Block block = p_46606_.m_60734_();
+      BlockState blockstate1 = m_8055_(p_46605_);
+      {
+         {
             if (blockstate1 == p_46606_) {
                if (blockstate != blockstate1) {
                   this.m_6550_(p_46605_, blockstate, blockstate1);
@@ -227,9 +_,8 @@
                }
 
                this.m_6559_(p_46605_, blockstate, blockstate1);
+               p_46606_.onBlockStateChange(this, p_46605_, blockstate);
             }
-
-            return true;
          }
       }
    }
@@ -244,6 +_,22 @@
 
    public boolean m_7740_(BlockPos p_46626_, boolean p_46627_, @Nullable Entity p_46628_, int p_46629_) {
       BlockState blockstate = this.m_8055_(p_46626_);
+      // Mohist start
+      org.bukkit.entity.Entity bukkit = p_46628_ == null ? null : p_46628_.getBukkitEntity();
+      if (bukkit == null && WorldAPI.destroyBlockProgress.containsKey(p_46626_)) {
+         bukkit = WorldAPI.destroyBlockProgress.get(p_46626_).getBukkitEntity();
+         WorldAPI.destroyBlockProgress.remove(p_46626_);
+      }
+      if (bukkit != null) {
+         ModsEntityDestroyBlockEvent event = new ModsEntityDestroyBlockEvent(new Location(this.getWorld(), p_46626_.m_123341_(), p_46626_.m_123342_(), p_46626_.m_123343_()), bukkit);
+         Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            org.bukkit.block.Block block = event.getLocation().getBlock();
+            block.getState().update();
+            return false;
+         }
+      }
+      // Mohist end
       if (blockstate.m_60795_()) {
          return false;
       } else {
@@ -269,9 +_,20 @@
    public void m_142052_(BlockPos p_151531_, BlockState p_151532_) {
    }
 
+   // Mohist start
+   private AtomicBoolean callEvent = new AtomicBoolean(false);
+
+   public void callEvent(boolean call) {
+      callEvent.set(call);
+   }
+   public BlockState mohist$defaultBlockState;
+
    public boolean m_46597_(BlockPos p_46598_, BlockState p_46599_) {
+      mohist$defaultBlockState = p_46599_;
+      if (callEvent.getAndSet(false)) return false;
       return this.m_7731_(p_46598_, p_46599_, 3);
    }
+   // Mohist end
 
    public abstract void m_7260_(BlockPos p_46612_, BlockState p_46613_, BlockState p_46614_, int p_46615_);
 
@@ -279,6 +_,7 @@
    }
 
    public void m_46672_(BlockPos p_46673_, Block p_46674_) {
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46673_, this.m_8055_(p_46673_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
    }
 
    public void m_46590_(BlockPos p_46591_, Block p_46592_, Direction p_46593_) {
@@ -314,6 +_,14 @@
    }
 
    public BlockState m_8055_(BlockPos p_46732_) {
+      // CraftBukkit start - tree generation
+      if (captureTreeGeneration) {
+         CapturedBlockState previous = capturedBlockStates.get(p_46732_);
+         if (previous != null) {
+            return previous.getHandle();
+         }
+      }
+      // CraftBukkit end
       if (this.m_151570_(p_46732_)) {
          return Blocks.f_50626_.m_49966_();
       } else {
@@ -398,10 +_,26 @@
       (this.f_151504_ ? this.f_151503_ : this.f_151512_).add(p_151526_);
    }
 
+   public void addFreshBlockEntities(java.util.Collection<BlockEntity> beList) {
+      if (this.f_151504_) {
+         this.pendingFreshBlockEntities.addAll(beList);
+      } else {
+         this.freshBlockEntities.addAll(beList);
+      }
+   }
+
    protected void m_46463_() {
       ProfilerFiller profilerfiller = this.m_46473_();
       profilerfiller.m_6180_("blockEntities");
+      if (!this.pendingFreshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.addAll(this.pendingFreshBlockEntities);
+         this.pendingFreshBlockEntities.clear();
+      }
       this.f_151504_ = true;
+      if (!this.freshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.forEach(BlockEntity::onLoad);
+         this.freshBlockEntities.clear();
+      }
       if (!this.f_151503_.isEmpty()) {
          this.f_151512_.addAll(this.f_151503_);
          this.f_151503_.clear();
@@ -420,16 +_,17 @@
 
       this.f_151504_ = false;
       profilerfiller.m_7238_();
+      spigotConfig.currentPrimedTnt = 0; // Spigot
    }
 
    public <T extends Entity> void m_46653_(Consumer<T> p_46654_, T p_46655_) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_46655_);
          p_46654_.accept(p_46655_);
       } catch (Throwable throwable) {
-         CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking entity");
-         CrashReportCategory crashreportcategory = crashreport.m_127514_("Entity being ticked");
-         p_46655_.m_7976_(crashreportcategory);
-         throw new ReportedException(crashreport);
+         p_46655_.m_146870_();
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_46655_);
       }
    }
 
@@ -445,8 +_,15 @@
       return this.m_183438_(ChunkPos.m_151388_(p_220394_));
    }
 
+   // Mohist start
+   private final AtomicBoolean mohist$pFire = new AtomicBoolean(false);
+   public void mohist$pFire(boolean pFire) {
+      mohist$pFire.set(pFire);
+   }
+   // Mohsit ene
+
    public Explosion m_254849_(@Nullable Entity p_256599_, double p_255914_, double p_255684_, double p_255843_, float p_256310_, Level.ExplosionInteraction p_256178_) {
-      return this.m_254877_(p_256599_, (DamageSource)null, (ExplosionDamageCalculator)null, p_255914_, p_255684_, p_255843_, p_256310_, false, p_256178_);
+      return this.m_254877_(p_256599_, (DamageSource)null, (ExplosionDamageCalculator)null, p_255914_, p_255684_, p_255843_, p_256310_, mohist$pFire.getAndSet(false), p_256178_);
    }
 
    public Explosion m_255391_(@Nullable Entity p_255682_, double p_255803_, double p_256403_, double p_256538_, float p_255674_, boolean p_256634_, Level.ExplosionInteraction p_256111_) {
@@ -471,7 +_,7 @@
             explosion$blockinteraction1 = this.m_255157_(GameRules.f_254629_);
             break;
          case MOB:
-            explosion$blockinteraction1 = this.m_46469_().m_46207_(GameRules.f_46132_) ? this.m_255157_(GameRules.f_254692_) : Explosion.BlockInteraction.KEEP;
+            explosion$blockinteraction1 = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this, p_256233_) ? this.m_255157_(GameRules.f_254692_) : Explosion.BlockInteraction.KEEP;
             break;
          case TNT:
             explosion$blockinteraction1 = this.m_255157_(GameRules.f_254705_);
@@ -482,6 +_,7 @@
 
       Explosion.BlockInteraction explosion$blockinteraction = explosion$blockinteraction1;
       Explosion explosion = new Explosion(this, p_256233_, p_255861_, p_255867_, p_256447_, p_255732_, p_255717_, p_256013_, p_256228_, explosion$blockinteraction);
+      if (explosion.wasCanceled || net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.m_46061_();
       explosion.m_46075_(p_256377_);
       return explosion;
@@ -495,16 +_,32 @@
 
    @Nullable
    public BlockEntity m_7702_(BlockPos p_46716_) {
-      if (this.m_151570_(p_46716_)) {
+      // CraftBukkit start
+      return getBlockEntity(p_46716_, true);
+   }
+
+   @Nullable
+   public BlockEntity getBlockEntity(BlockPos pPos, boolean validate) {
+      if (capturedTileEntities.containsKey(pPos)) {
+         return capturedTileEntities.get(pPos);
+      }
+      // CraftBukkit end
+      if (this.m_151570_(pPos)) {
          return null;
       } else {
-         return !this.f_46443_ && Thread.currentThread() != this.f_46423_ ? null : this.m_46745_(p_46716_).m_5685_(p_46716_, LevelChunk.EntityCreationType.IMMEDIATE);
+         return !this.f_46443_ && Thread.currentThread() != this.f_46423_ ? null : this.m_46745_(pPos).m_5685_(pPos, LevelChunk.EntityCreationType.IMMEDIATE);
       }
    }
 
    public void m_151523_(BlockEntity p_151524_) {
       BlockPos blockpos = p_151524_.m_58899_();
       if (!this.m_151570_(blockpos)) {
+         // CraftBukkit start
+         if (captureBlockStates) {
+            capturedTileEntities.put(blockpos.m_7949_(), p_151524_);
+            return;
+         }
+         // CraftBukkit end
          this.m_46745_(blockpos).m_142170_(p_151524_);
       }
    }
@@ -513,6 +_,7 @@
       if (!this.m_151570_(p_46748_)) {
          this.m_46745_(p_46748_).m_8114_(p_46748_);
       }
+      this.m_46717_(p_46748_, m_8055_(p_46748_).m_60734_()); //Notify neighbors of changes
    }
 
    public boolean m_46749_(BlockPos p_46750_) {
@@ -583,6 +_,7 @@
             list.add(p_151522_);
          }
 
+         if (false)
          if (p_151522_ instanceof EnderDragon) {
             for(EnderDragonPart enderdragonpart : ((EnderDragon)p_151522_).m_31156_()) {
                if (p_151522_ != p_46536_ && p_46538_.test(enderdragonpart)) {
@@ -592,6 +_,11 @@
          }
 
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         if (p != p_46536_ && p.m_20191_().m_82381_(p_46537_) && p_46538_.test(p)) {
+            list.add(p);
+         }
+      }
       return list;
    }
 
@@ -615,6 +_,8 @@
             }
          }
 
+
+         if (false)
          if (p_261454_ instanceof EnderDragon enderdragon) {
             for(EnderDragonPart enderdragonpart : enderdragon.m_31156_()) {
                T t = p_261885_.m_141992_(enderdragonpart);
@@ -629,6 +_,15 @@
 
          return AbortableIterationConsumer.Continuation.CONTINUE;
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         T t = p_261885_.m_141992_(p);
+         if (t != null && t.m_20191_().m_82381_(p_262086_) && p_261688_.test(t)) {
+            p_262071_.add(t);
+            if (p_262071_.size() >= p_261858_) {
+               break;
+            }
+         }
+      }
    }
 
    @Nullable
@@ -760,16 +_,15 @@
    public abstract Scoreboard m_6188_();
 
    public void m_46717_(BlockPos p_46718_, Block p_46719_) {
-      for(Direction direction : Direction.Plane.HORIZONTAL) {
+      for(Direction direction : Direction.values()) {
          BlockPos blockpos = p_46718_.m_121945_(direction);
          if (this.m_46805_(blockpos)) {
             BlockState blockstate = this.m_8055_(blockpos);
-            if (blockstate.m_60713_(Blocks.f_50328_)) {
-               this.m_213960_(blockstate, blockpos, p_46719_, p_46718_, false);
-            } else if (blockstate.m_60796_(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, p_46718_);
+            if (blockstate.m_60796_(this, blockpos)) {
                blockpos = blockpos.m_121945_(direction);
                blockstate = this.m_8055_(blockpos);
-               if (blockstate.m_60713_(Blocks.f_50328_)) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   this.m_213960_(blockstate, blockpos, p_46719_, p_46718_, false);
                }
             }
@@ -856,11 +_,23 @@
       return this.f_46420_;
    }
 
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
+
    public final boolean m_46659_() {
       return this.f_46424_;
    }
 
-   protected abstract LevelEntityGetter<Entity> m_142646_();
+   public abstract LevelEntityGetter<Entity> m_142646_();
 
    public long m_183596_() {
       return (long)(this.f_186455_++);
@@ -871,7 +_,7 @@
    }
 
    public DamageSources m_269111_() {
-      return this.f_268497_;
+      return Objects.requireNonNullElseGet(this.f_268497_, () -> new DamageSources(m_7654_().m_206579_()));
    }
 
    public static enum ExplosionInteraction {
@@ -880,4 +_,53 @@
       MOB,
       TNT;
    }
+
+   // CraftBukkit start - Split off from above in order to directly send client and physic updates
+   public void notifyAndUpdatePhysics(BlockPos blockposition, LevelChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) {
+      BlockState iblockdata = newBlock;
+      BlockState iblockdata1 = oldBlock;
+      BlockState iblockdata2 = actualBlock;
+      if (iblockdata2 == iblockdata) {
+         if (iblockdata1 != iblockdata2) {
+            this.m_6550_(blockposition, iblockdata1, iblockdata2);
+         }
+
+         if ((i & 2) != 0 && (!this.f_46443_ || (i & 4) == 0) && (this.f_46443_ || chunk == null || (chunk.m_287138_() != null && chunk.m_287138_().m_287205_(FullChunkStatus.FULL)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+            this.m_7260_(blockposition, iblockdata1, iblockdata, i);
+         }
+
+         if ((i & 1) != 0) {
+            this.m_6289_(blockposition, iblockdata1.m_60734_());
+            if (!this.f_46443_ && iblockdata.m_60807_()) {
+               this.m_46717_(blockposition, newBlock.m_60734_());
+            }
+         }
+
+         if ((i & 16) == 0 && j > 0) {
+            int k = i & -34;
+
+            // CraftBukkit start
+            iblockdata1.m_60762_(this, blockposition, k, j - 1); // Don't call an event for the old block to limit event spam
+            if (world != null) {
+               BlockPhysicsEvent event = new BlockPhysicsEvent(CraftBlock.at(this, blockposition), CraftBlockData.fromData(iblockdata));
+               this.getCraftServer().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  return;
+               }
+            }
+
+            // CraftBukkit end
+            iblockdata.m_60705_(this, blockposition, k, j - 1);
+            iblockdata.m_60762_(this, blockposition, k, j - 1);
+         }
+
+         // CraftBukkit start - SPIGOT-5710
+         if (!preventPoiUpdated) {
+            this.m_6559_(blockposition, iblockdata1, iblockdata2);
+         }
+         // CraftBukkit end
+      }
+   }
+   // CraftBukkit end
 }
