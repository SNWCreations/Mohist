--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,6 +_,14 @@
 package net.minecraft.server.dedicated;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.Metrics;
+import com.mohistmc.MohistConfig;
+import com.mohistmc.MohistMC;
+import com.mohistmc.WatchMohist;
+import com.mohistmc.api.ServerAPI;
+import com.mohistmc.api.color.ColorsAPI;
+import com.mohistmc.paper.brigadier.PaperBrigadierProviderImpl;
+import com.mohistmc.util.I18n;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
@@ -9,6 +_,7 @@
 import java.io.InputStreamReader;
 import java.io.Writer;
 import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
@@ -51,6 +_,12 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_20_R1.util.ForwardLogHandler;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -68,23 +_,50 @@
    private MinecraftServerGui f_139605_;
    @Nullable
    private final TextFilterClient f_139606_;
+   @Nullable
+   private net.minecraft.client.server.LanServerPinger dediLanPinger;
 
    public DedicatedServer(Thread p_214789_, LevelStorageSource.LevelStorageAccess p_214790_, PackRepository p_214791_, WorldStem p_214792_, DedicatedServerSettings p_214793_, DataFixer p_214794_, Services p_214795_, ChunkProgressListenerFactory p_214796_) {
       super(p_214789_, p_214790_, p_214791_, p_214792_, Proxy.NO_PROXY, p_214794_, p_214795_, p_214796_);
       this.f_139604_ = p_214793_;
-      this.f_139602_ = new RconConsoleSource(this);
+      this.rconPort = p_214793_.m_139777_().f_139748_;
+      this.f_139602_ = new RconConsoleSource(this, new InetSocketAddress(rconPort));
       this.f_139606_ = TextFilterClient.m_143736_(p_214793_.m_139777_().f_139724_);
    }
 
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            // CraftBukkit start
             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
-            String s1;
-            try {
-               while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
+            String s;
+            try {
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_()) {
+                  s = bufferedreader.readLine();
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.m_139645_(s, DedicatedServer.this.m_129893_());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
@@ -92,15 +_,28 @@
 
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new ForwardLogHandler());
+      final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
-      f_139598_.info("Starting minecraft server version {}", (Object)SharedConstants.m_183709_().m_132493_());
+      f_139598_.info(I18n.as("minecraftserver.minecraftversion",(Object)SharedConstants.m_183709_().m_132493_()));
       if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
-         f_139598_.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
+         f_139598_.warn(I18n.as("minecraftserver.javamemtoolow"));
       }
 
-      f_139598_.info("Loading properties");
+      f_139598_.info(I18n.as("minecraftserver.loadingproperties"));
       DedicatedServerProperties dedicatedserverproperties = this.f_139604_.m_139777_();
       if (this.m_129792_()) {
          this.m_129913_("127.0.0.1");
@@ -110,13 +_,15 @@
          this.m_129913_(dedicatedserverproperties.f_139730_);
       }
 
+      PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
+
       this.m_129997_(dedicatedserverproperties.f_139733_);
       this.m_129999_(dedicatedserverproperties.f_139734_);
       this.m_129989_(dedicatedserverproperties.f_139736_);
       super.m_7196_(dedicatedserverproperties.f_139725_.get());
       this.m_130004_(dedicatedserverproperties.f_139738_);
-      this.f_129749_.m_5458_(dedicatedserverproperties.f_139740_);
-      f_139598_.info("Default game type: {}", (Object)dedicatedserverproperties.f_139740_);
+      this.f_129749_.m_5458_(dedicatedserverproperties.f_139740_); // Mohist TODO // CraftBukkit - moved to world loading
+      f_139598_.info(I18n.as("minecraftserver.defaultgamemode", (Object)dedicatedserverproperties.f_139740_));
       InetAddress inetaddress = null;
       if (!this.m_130009_().isEmpty()) {
          inetaddress = InetAddress.getByName(this.m_130009_());
@@ -127,22 +_,22 @@
       }
 
       this.m_129793_();
-      f_139598_.info("Starting Minecraft server on {}:{}", this.m_130009_().isEmpty() ? "*" : this.m_130009_(), this.m_7010_());
+      f_139598_.info(I18n.as("minecraftserver.startingserver",this.m_130009_().isEmpty() ? "*" : this.m_130009_(), this.m_7010_()) );
 
       try {
          this.m_129919_().m_9711_(inetaddress, this.m_7010_());
       } catch (IOException ioexception) {
-         f_139598_.warn("**** FAILED TO BIND TO PORT!");
-         f_139598_.warn("The exception was: {}", (Object)ioexception.toString());
-         f_139598_.warn("Perhaps a server is already running on that port?");
+         f_139598_.warn(I18n.as("minecraftserver.bindport1"));
+         f_139598_.warn(I18n.as("minecraftserver.bindport2", ioexception.getMessage()));
+         f_139598_.warn(I18n.as("minecraftserver.bindport3",this.m_7010_()));
          return false;
       }
 
       if (!this.m_129797_()) {
-         f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-         f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-         f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
+         f_139598_.warn(I18n.as("minecraftserver.playerauth1"));
+         f_139598_.warn(I18n.as("minecraftserver.playerauth2"));
+         f_139598_.warn(I18n.as("minecraftserver.playerauth3"));
+         f_139598_.warn(I18n.as("minecraftserver.playerauth4"));
       }
 
       if (this.m_139668_()) {
@@ -153,14 +_,31 @@
          return false;
       } else {
          this.m_129823_(new DedicatedPlayerList(this, this.m_247573_(), this.f_129745_));
+         // Spigot start
+         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+         org.spigotmc.SpigotConfig.registerCommands();
+         // Spigot end
+         // Mohsit start
+         MohistConfig.init((java.io.File) options.valueOf("mohist-settings"));
+         MohistConfig.registerCommands();
+         if (MohistConfig.motdEnable) {
+            this.m_129989_(MohistConfig.motd());
+         }
+         // Mohist end
+         // CraftBukkit start
+         server.loadPlugins();
+         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+         // CraftBukkit end
          long i = Util.m_137569_();
          SkullBlockEntity.m_222885_(this.f_236721_, this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
          this.m_130006_();
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
-         f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         f_139598_.info(I18n.as("minecraftserver.startdone",(Object)s));
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -175,7 +_,7 @@
             this.f_139603_ = RconThread.m_11615_(this);
          }
 
-         if (this.m_139669_() > 0L) {
+         if (false && this.m_139669_() > 0L) { // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
             thread1.setName("Server Watchdog");
@@ -188,7 +_,13 @@
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         if (net.minecraftforge.common.ForgeConfig.SERVER.advertiseDedicatedServerToLan.get()) {
+            this.dediLanPinger = new net.minecraft.client.server.LanServerPinger(this.m_129916_(), String.valueOf(this.m_7448_()));
+            this.dediLanPinger.start();
+         }
+         Metrics.MohistMetrics.startMetrics();
+         WatchMohist.start();
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -263,6 +_,16 @@
          this.f_139601_.m_7530_();
       }
 
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
+
+      if (ServerAPI.yes_steve_model()) {
+         System.exit(0);
+      } else {
+         Runtime.getRuntime().halt(0);
+      }
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -281,7 +_,16 @@
    public void m_139665_() {
       while(!this.f_139600_.isEmpty()) {
          ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_230957_(consoleinput.f_135929_, consoleinput.f_135928_);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, consoleinput.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.f_135929_);
+
+         // this.getCommands().performCommand(servercommand.source, servercommand.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
 
    }
@@ -395,8 +_,7 @@
    }
 
    public boolean m_214005_() {
-      DedicatedServerProperties dedicatedserverproperties = this.m_7913_();
-      return dedicatedserverproperties.f_214804_ && dedicatedserverproperties.f_139728_ && this.f_236721_.m_284133_() != null;
+      return false; // Mohist chat verify
    }
 
    protected boolean m_139668_() {
@@ -474,7 +_,29 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
@@ -485,6 +_,21 @@
       return this.f_139602_.m_11513_();
    }
 
+   public String runCommand(RconConsoleSource rconConsoleSource0, String pCommand) {
+      rconConsoleSource0.m_11512_();
+      this.m_18709_(() -> {
+         CommandSourceStack wrapper = rconConsoleSource0.m_11514_();
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(rconConsoleSource0.getBukkitSender(wrapper), pCommand);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
+         server.dispatchServerCommand(event.getSender(), serverCommand);
+      });
+      return rconConsoleSource0.m_11513_();
+   }
+
    public void m_139688_(boolean p_139689_) {
       this.f_139604_.m_139778_((p_278925_) -> {
          return p_278925_.f_139726_.m_139895_(this.m_206579_(), p_139689_);
@@ -492,7 +_,12 @@
    }
 
    public void m_7041_() {
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
       super.m_7041_();
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
       Util.m_137580_();
       SkullBlockEntity.m_196704_();
    }
@@ -524,5 +_,15 @@
 
    public Optional<MinecraftServer.ServerResourcePackInfo> m_214042_() {
       return this.f_139604_.m_139777_().f_214802_;
+   }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
    }
 }
